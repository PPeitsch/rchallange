# Specialized the insignificant value according to the significant level
corrplot(correlation_m,
type="upper",
diag=FALSE )
correlation_matrix
correlation_m
# Read ticker prices data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data only for the 5 selected companies
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Create a table object with correlation statistics
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Show the table in the document
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Get dates from the original matrix
dates <- correlation_data %>%
select(date) %>%
distinct()
# Check if lengths are equal and adjust if necessary
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Adjusting the length of dates to match the correlation matrix.")
dates <- head(dates, nrow(correlation_matrix))
}
# Add the date column to the correlation matrix
correlation_matrix <- bind_cols(dates, correlation_matrix)
# Define the tickers
tickers <- c("BTC-USD", "GC=F", "CL=F", "BZ=F", "^IXIC", "^GSPC")
# Get data
stock_data <- Map(function(ticker) {
data <- getSymbols(
ticker,
src = 'yahoo',
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily',
auto.assign = FALSE
)
data_df <- data.frame(date = index(data), Close = Cl(data))
colnames(data_df) <- c("date", paste(ticker, ".Close", sep = "_"))
data_df
}, tickers)
# Combine data frames
combined_data <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), stock_data)
# Extract dates from BTC data
btc_dates <- index(stock_data[[1]])
# Get common dates
common_dates <- Reduce(intersect, lapply(stock_data, function(data_df) as.Date(data_df$date)))
# Filter data for common dates
combined_data <- combined_data[as.Date(combined_data$date) %in% as.Date(common_dates), ] %>%
na.omit()
correlation_matrix <- correlation_matrix[correlation_matrix$date %in% common_dates, ]
correlation_matrix <- merge(correlation_matrix, combined_data, by = "date", all = TRUE)
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix[, -1])
correlation_matrix
correlation_matrix %>% na.omit()
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix[, -1])
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix[, -1])
correlation_matrix
correlation_matrix %>% na.omit() %>% correlation_matrix[, -1]
correllation_matrix <- correlation_matrix[, -1]
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix[, -1])
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix)
correlation_matrix
correllation_matrix <- correlation_matrix[, -1]
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix)
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix)
correllation_matrix
# Read ticker prices data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data only for the 5 selected companies
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Create a table object with correlation statistics
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Show the table in the document
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Get dates from the original matrix
dates <- correlation_data %>%
select(date) %>%
distinct()
# Check if lengths are equal and adjust if necessary
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Adjusting the length of dates to match the correlation matrix.")
dates <- head(dates, nrow(correlation_matrix))
}
# Add the date column to the correlation matrix
correlation_matrix <- bind_cols(dates, correlation_matrix)
# Define the tickers
tickers <- c("BTC-USD", "GC=F", "CL=F", "BZ=F", "^IXIC", "^GSPC")
# Get data
stock_data <- Map(function(ticker) {
data <- getSymbols(
ticker,
src = 'yahoo',
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily',
auto.assign = FALSE
)
data_df <- data.frame(date = index(data), Close = Cl(data))
colnames(data_df) <- c("date", paste(ticker, ".Close", sep = "_"))
data_df
}, tickers)
# Combine data frames
combined_data <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), stock_data)
# Extract dates from BTC data
btc_dates <- index(stock_data[[1]])
# Get common dates
common_dates <- Reduce(intersect, lapply(stock_data, function(data_df) as.Date(data_df$date)))
# Filter data for common dates
combined_data <- combined_data[as.Date(combined_data$date) %in% as.Date(common_dates), ] %>%
na.omit()
correlation_matrix <- correlation_matrix[correlation_matrix$date %in% common_dates, ]
correlation_matrix <- merge(correlation_matrix, combined_data, by = "date", all = TRUE)
correlation_matrix %>% na.omit()
correllation_matrix <- correlation_matrix[, -1]
correllation_matrix <- correlation_matrix[, -1]
# Calculate correlation matrix
correlation_m <- cor(correlation_matrix)
correlation_matrix
# Read ticker prices data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data only for the 5 selected companies
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Create a table object with correlation statistics
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Show the table in the document
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Get dates from the original matrix
dates <- correlation_data %>%
select(date) %>%
distinct()
# Check if lengths are equal and adjust if necessary
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Adjusting the length of dates to match the correlation matrix.")
dates <- head(dates, nrow(correlation_matrix))
}
# Add the date column to the correlation matrix
correlation_matrix <- bind_cols(dates, correlation_matrix)
```{r}
# Define the tickers
tickers <- c("BTC-USD", "GC=F", "CL=F", "BZ=F", "^IXIC", "^GSPC")
# Get data
stock_data <- Map(function(ticker) {
data <- getSymbols(
ticker,
src = 'yahoo',
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily',
auto.assign = FALSE
)
data_df <- data.frame(date = index(data), Close = Cl(data))
colnames(data_df) <- c("date", paste(ticker, ".Close", sep = "_"))
data_df
}, tickers)
# Combine data frames
combined_data <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), stock_data)
# Extract dates from BTC data
btc_dates <- index(stock_data[[1]])
# Get common dates
common_dates <- Reduce(intersect, lapply(stock_data, function(data_df) as.Date(data_df$date)))
# Filter data for common dates
combined_data <- combined_data[as.Date(combined_data$date) %in% as.Date(common_dates), ] %>%
na.omit()
correlation_matrix <- correlation_matrix[correlation_matrix$date %in% common_dates, ]
combined_data
correlation_matrix <- correlation_matrix[as.Date(correlation_matrix$date) %in% as.Date(common_dates), ]
correlation_matrix
correlation_merged <- merge(correlation_matrix, combined_data, by = "date", all = TRUE)
correlation_merged
# Calculate correlation matrix
correlation_m <- cor(correlation_merged[, -1])
# Load required libraries
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
library(quantmod)
# Read cleaned stock prices data
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Read market capitalization data
market_cap_df <- readRDS(here::here("data", "query_market_cap_result.RDS"))
# Create a stacked area plot for market capitalization
ggplot(market_cap_df, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (bill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Read market filtered data
selected_data <- readRDS(here::here("data", "selected_data.RDS"))
# Get companies tickers
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
# Create a trend plot for stock prices
ggplot(selected_data, aes(x = as.Date(date), y = close, color = stock_symbol)) +
geom_point(size = 0.5) +
labs(title = "Figura 2. Las 5 Big Tech de mayor capitalización",
x = "Fecha (años)",
y = "Precio de Cierre (u$s)",
color = "Compañías") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Read drawdowns data
drawdowns_result <- readRDS(here::here("data", "drawdowns_result.RDS"))
# Calculate drawdowns for selected companies
for_drawdown <- mutate(drawdowns_result, date = as.Date(date))
for_drawdown_xts_list <- for_drawdown %>%
group_by(stock_symbol) %>%
arrange(stock_symbol) %>%
na.omit() %>%
group_map(~ xts(.x$close, order.by = .x$date), .keep = TRUE)
# Assign symbols' names to the xts list
names(for_drawdown_xts_list) <- unique(for_drawdown$stock_symbol)
# Function to calculate drawdown
calculate_drawdown <- function(xts_data) {
max_val <- cummax(xts_data)
drawdown <- (xts_data - max_val) / max_val * 100
return(drawdown)
}
# Apply the function to each element of the list
drawdowns_list <- map(for_drawdown_xts_list, calculate_drawdown)
# Function to plot drawdown
plot_drawdown <- function(drawdown_data, symbol) {
ggplot(data = drawdown_data, aes(x = index(drawdown_data), y = drawdown_data[, 1])) +
geom_line() +
labs(title = paste("Drawdown of", symbol),
x = "Date",
y = "% Fall") +
theme_minimal()
}
# Create a list of plots
drawdown_plots <- lapply(seq_along(drawdowns_list), function(i) {
plot_drawdown(drawdowns_list[[i]], names(drawdowns_list)[i])
})
# Plot drawdowns in a grid
grid.arrange(grobs = drawdown_plots, ncol = 2)
# Create a table with maximum draw down percentages
drawdown_table <- lapply(seq_along(drawdowns_list), function(i) {
data.frame(Symbol = names(drawdowns_list)[i], MaxDrawdown = min(drawdowns_list[[i]]))
})
# Combine the list into a single data frame
drawdown_df <- do.call(rbind, drawdown_table)
# Order the table by max draw down in descending order
drawdown_df <- drawdown_df[order(drawdown_df$MaxDrawdown), ]
# Print the draw down table
kable(drawdown_df, caption = "Tabla 1. Porcentajes de caída máxima")
# Read ticker prices data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data only for the 5 selected companies
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Create a table object with correlation statistics
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Show the table in the document
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Get dates from the original matrix
dates <- correlation_data %>%
select(date) %>%
distinct()
# Check if lengths are equal and adjust if necessary
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Adjusting the length of dates to match the correlation matrix.")
dates <- head(dates, nrow(correlation_matrix))
}
# Add the date column to the correlation matrix
correlation_matrix <- bind_cols(dates, correlation_matrix)
stock_data <- new.env()
# Define the tickers so we formulate what we need
tickers <- c("BTC-USD",
"GC=F",
"CL=F",
"BZ=F",
"^IXIC",
"^GSPC")
getSymbols(
tickers,
src = 'yahoo',
env = stock_data,
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily'
)
# Read additional data
btc_data <- stock_data$`BTC-USD`
gold_data <- stock_data$`GC=F`
wti_data <- stock_data$`CL=F`
brent_data <- stock_data$`BZ=F`
nasdaq_data <- stock_data$IXIC
sp500_data <- stock_data$GSPC
btc_data_df <- as.data.frame(btc_data)
gold_data_df <- as.data.frame(gold_data)
wti_data_df <- as.data.frame(wti_data)
brent_data_df <- as.data.frame(brent_data)
nasdaq_data_df <- as.data.frame(nasdaq_data)
sp500_data_df <- as.data.frame(sp500_data)
btc_data_close <- btc_data_df %>%
select('BTC-USD.Close') %>%
drop_na()
gold_data_close <- gold_data_df %>%
select('GC=F.Close') %>%
drop_na()
wti_data_close <- wti_data_df %>%
select('CL=F.Close') %>%
drop_na()
brent_data_close <- brent_data_df %>%
select('BZ=F.Close') %>%
drop_na()
nasdaq_data_close <- nasdaq_data_df %>%
select('IXIC.Close') %>%
drop_na()
sp500_data_close <- sp500_data_df %>%
select('GSPC.Close') %>%
drop_na()
# Extract dates from btc_data
btc_dates <- index(btc_data)
# Convert dates to a common format
correlation_data$date <- as.Date(correlation_data$date)
btc_dates <- as.Date(btc_dates)
# Get common dates for each data set
common_dates_btc <- as.Date(rownames(btc_data_close))
common_dates_gold <- as.Date(rownames(gold_data_close))
common_dates_wti <- as.Date(rownames(wti_data_close))
common_dates_brent <- as.Date(rownames(brent_data_close))
common_dates_nasdaq <- as.Date(rownames(nasdaq_data_close))
common_dates_sp500 <- as.Date(rownames(sp500_data_close))
# Find common dates across all data sets
common_dates <- Reduce(intersect, list(common_dates_btc, common_dates_gold, common_dates_wti, common_dates_brent, common_dates_nasdaq, common_dates_sp500, correlation_matrix$date))
# Filter data for common dates
common_dates <- as.Date(common_dates)
# Filter and add columns for each data set
btc_data_close <-
data.frame(date = common_dates,
BTC = btc_data_close[rownames(btc_data_close) %in%
common_dates, ])
gold_data_close <-
data.frame(date = common_dates,
GOLD = gold_data_close[rownames(gold_data_close) %in%
common_dates, ])
wti_data_close <-
data.frame(date = common_dates,
WTI = wti_data_close[rownames(wti_data_close) %in%
common_dates, ])
brent_data_close <-
data.frame(date = common_dates,
BRENT = brent_data_close[rownames(brent_data_close) %in%
common_dates, ])
nasdaq_data_close <-
data.frame(date = common_dates,
NASDAQ = nasdaq_data_close[rownames(nasdaq_data_close) %in%
common_dates, ])
sp500_data_close <-
data.frame(date = common_dates,
SP500 = sp500_data_close[rownames(sp500_data_close) %in%
common_dates, ])
# Example for BTC
correlation_matrix <- correlation_matrix[correlation_matrix$date %in% common_dates, ]
# Merge with the correlation matrix
correlation_matrix <- merge(correlation_matrix, btc_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, gold_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, wti_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, brent_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, nasdaq_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, sp500_data_close, by = "date", all = TRUE)
# Remove date column from correlation_matrix
correlation_matrix <- correlation_matrix[, -1]
# Remove tickers labels column from correlation_matrix
correlation_matrix <- correlation_matrix[, -1]
# Calculate new correlation matrix
correlation_m <- cor(correlation_matrix)
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(correlation_m)
# Specialized the insignificant value according to the significant level
corrplot(correlation_m,
type="upper",
order="hclust",
# pvalues
p.mat = p.mat,
# coeficients
addCoef.col = "white", number.digits = 2, number.cex = 0.75,
sig.level = 0.01,
# hide correlation coefficient on the principal diagonal
diag=FALSE )
renv::snapshot()
