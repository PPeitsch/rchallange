Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Obtener las fechas desde la matriz original
dates <- correlation_data %>%
select(date) %>%
distinct()
# Verificar si las longitudes son iguales y ajustar si es necesario
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Ajustando la longitud de las fechas para que coincida con la matriz de correlación.")
dates <- head(dates, nrow(correlation_matrix))
}
# Agregar la columna date a la matriz de correlación
correlation_matrix <- bind_cols(dates, correlation_matrix)
library(quantmod)
stock_data <- new.env()
# Define the tickers so we formulate what we need
tickers <- c("BTC-USD",
"GC=F",
"CL=F",
"BZ=F",
"^IXIC",
"^GSPC")
getSymbols(
tickers,
src = 'yahoo',
env = stock_data,
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily'
)
# Seleccionar las 5 compañías con mayor capitalización bursátil
top_5_market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol) %>%
summarise(market_cap = mean(close) * sum(volume)) %>%
arrange(desc(market_cap)) %>%
slice_head(n = 5)
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- top_5_market_cap$stock_symbol
selected_data <- big_tech_stock_prices_cleaned %>%
filter(stock_symbol %in% selected_tickers)
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap_df <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000000) %>%
arrange(market_cap)
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap_df, aes(x = reorder(stock_symbol,
-market_cap),
y = market_cap,
fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (bill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Seleccionar las 5 compañías con mayor capitalización bursátil
top_5_market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol) %>%
summarise(market_cap = mean(close) * sum(volume)) %>%
arrange(desc(market_cap)) %>%
slice_head(n = 5)
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- top_5_market_cap$stock_symbol
selected_data <- big_tech_stock_prices_cleaned %>%
filter(stock_symbol %in% selected_tickers)
# Crear un gráfico de tendencias de precios
ggplot(selected_data,
aes(x = date,
y = close,
color = stock_symbol)) +
geom_point(size = 0.5) +
labs(title = "Figura 2. PLas 5 Big Tech de mayor capitalización",
x = "Fecha (años)",
y = "Precio de Cierre (u$s)",
color = "Compañías") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
# Seleccionar las columnias relevantes
for_drawdown <- select(selected_data, stock_symbol, date, close)
# Convertir a xts por símbolo
for_drawdown_xts_list <- for_drawdown %>%
group_by(stock_symbol) %>%
arrange(stock_symbol, date) %>%
group_map(~ xts(.x$close, order.by = .x$date), .keep = TRUE)
# Asignar nombres de símbolos a la lista de xts
names(for_drawdown_xts_list) <- unique(for_drawdown$stock_symbol)
# Función para calcular drawdown
calculate_drawdown <- function(xts_data) {
max_val <- cummax(xts_data)
drawdown <- (xts_data - max_val) / max_val * 100
return(drawdown)
}
# Aplicar la función a cada elemento de la lista
drawdowns_list <- map(for_drawdown_xts_list, calculate_drawdown)
# Función para graficar drawdown
plot_drawdown <- function(drawdown_data, symbol) {
ggplot(data = drawdown_data, aes(x = index(drawdown_data), y = drawdown_data[, 1])) +
geom_line() +
labs(title = paste("Drawdown de", symbol),
x = "Fecha",
y = "% caída") +
theme_minimal()
}
# Crear una lista de gráficos
drawdown_plots <- lapply(seq_along(drawdowns_list), function(i) {
plot_drawdown(drawdowns_list[[i]], names(drawdowns_list)[i])
})
# Graficar los drawdowns en una cuadrícula
grid.arrange(grobs = drawdown_plots, ncol = 2)
# Crear una tabla con los porcentajes de drawdown
drawdown_table <- lapply(seq_along(drawdowns_list), function(i) {
data.frame(Simbolo = names(drawdowns_list)[i],
MaxCaida = min(drawdowns_list[[i]]))
})
# Combinar la lista en un solo data frame
drawdown_df <- do.call(rbind, drawdown_table)
# Ordenar la tabla por MaxCaida en orden descendente
drawdown_df <- drawdown_df[order(drawdown_df$MaxCaida), ]
# Imprimir la tabla
kable(drawdown_df, caption = "Tabla 1. Porcentajes de caída máxima")
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Obtener las fechas desde la matriz original
dates <- correlation_data %>%
select(date) %>%
distinct()
# Verificar si las longitudes son iguales y ajustar si es necesario
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Ajustando la longitud de las fechas para que coincida con la matriz de correlación.")
dates <- head(dates, nrow(correlation_matrix))
}
# Agregar la columna date a la matriz de correlación
correlation_matrix <- bind_cols(dates, correlation_matrix)
library(quantmod)
stock_data <- new.env()
# Define the tickers so we formulate what we need
tickers <- c("BTC-USD",
"GC=F",
"CL=F",
"BZ=F",
"^IXIC",
"^GSPC")
getSymbols(
tickers,
src = 'yahoo',
env = stock_data,
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily'
)
# Load required libraries
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
library(quantmod)
# Read cleaned stock prices data
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Calculate market capitalization
market_cap_df <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000000) %>%
arrange(market_cap)
# Create a stacked area plot for market capitalization
ggplot(market_cap_df, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (bill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Select the top 5 companies by market capitalization
top_5_market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol) %>%
summarise(market_cap = mean(close) * sum(volume)) %>%
arrange(desc(market_cap)) %>%
slice_head(n = 5)
# Filter data for the top 5 companies
selected_tickers <- top_5_market_cap$stock_symbol
selected_data <- big_tech_stock_prices_cleaned %>%
filter(stock_symbol %in% selected_tickers)
# Create a trend plot for stock prices
ggplot(selected_data, aes(x = date, y = close, color = stock_symbol)) +
geom_point(size = 0.5) +
labs(title = "Figura 2. Las 5 Big Tech de mayor capitalización",
x = "Fecha (años)",
y = "Precio de Cierre (u$s)",
color = "Compañías") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Calculate drawdowns for selected companies
for_drawdown <- select(selected_data, stock_symbol, date, close)
for_drawdown_xts_list <- for_drawdown %>%
group_by(stock_symbol) %>%
arrange(stock_symbol, date) %>%
group_map(~ xts(.x$close, order.by = .x$date), .keep = TRUE)
# Plot drawdowns for each company
drawdown_plots <- lapply(seq_along(drawdowns_list), function(i) {
plot_drawdown(drawdowns_list[[i]], names(drawdowns_list)[i])
})
# Arrange drawdown plots in a grid
grid.arrange(grobs = drawdown_plots, ncol = 2)
# Create a table with maximum drawdown percentages
drawdown_table <- lapply(seq_along(drawdowns_list), function(i) {
data.frame(Symbol = names(drawdowns_list)[i], MaxDrawdown = min(drawdowns_list[[i]]))
})
# Combine the list into a single data frame
drawdown_df <- do.call(rbind, drawdown_table)
# Order the table by MaxDrawdown in descending order
drawdown_df <- drawdown_df[order(drawdown_df$MaxDrawdown), ]
# Print the drawdown table
kable(drawdown_df, caption = "Tabla 1. Porcentajes de caída máxima")
# Read additional stock price data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data for the selected companies
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame for correlation calculation
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol, values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
corrplot(correlation_m, type = "upper", order = "hclust")
# Read ticker prices data
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filter data only for the 5 selected companies
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Create a wide data frame
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calculate the correlation matrix
correlation_m <- cor(correlation_matrix)
# Create a correlation plot
# correlation_plot <- corrplot(correlation_m,
#                              method = "circle",
#                              type = "upper",
#                              tl.col = "black",
#                              tl.srt = 45)
# Create a table object with correlation statistics
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Show the table in the document
# kable(correlation_stats, "html") %>%
#   kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Get dates from the original matrix
dates <- correlation_data %>%
select(date) %>%
distinct()
# Check if lengths are equal and adjust if necessary
if (nrow(correlation_matrix) != nrow(dates)) {
warning("Adjusting the length of dates to match the correlation matrix.")
dates <- head(dates, nrow(correlation_matrix))
}
# Add the date column to the correlation matrix
correlation_matrix <- bind_cols(dates, correlation_matrix)
stock_data <- new.env()
# Define the tickers so we formulate what we need
tickers <- c("BTC-USD",
"GC=F",
"CL=F",
"BZ=F",
"^IXIC",
"^GSPC")
getSymbols(
tickers,
src = 'yahoo',
env = stock_data,
from = as.Date("2010-01-01"),
to = as.Date("2023-07-30"),
periodicity = 'daily'
)
# Read additional data
btc_data <- stock_data$`BTC-USD`
gold_data <- stock_data$`GC=F`
wti_data <- stock_data$`CL=F`
brent_data <- stock_data$`BZ=F`
nasdaq_data <- stock_data$IXIC
sp500_data <- stock_data$GSPC
btc_data_df <- as.data.frame(btc_data)
gold_data_df <- as.data.frame(gold_data)
wti_data_df <- as.data.frame(wti_data)
brent_data_df <- as.data.frame(brent_data)
nasdaq_data_df <- as.data.frame(nasdaq_data)
sp500_data_df <- as.data.frame(sp500_data)
btc_data_close <- btc_data_df %>%
select('BTC-USD.Close') %>%
drop_na()
gold_data_close <- gold_data_df %>%
select('GC=F.Close') %>%
drop_na()
wti_data_close <- wti_data_df %>%
select('CL=F.Close') %>%
drop_na()
brent_data_close <- brent_data_df %>%
select('BZ=F.Close') %>%
drop_na()
nasdaq_data_close <- nasdaq_data_df %>%
select('IXIC.Close') %>%
drop_na()
sp500_data_close <- sp500_data_df %>%
select('GSPC.Close') %>%
drop_na()
# Extract dates from btc_data
btc_dates <- index(btc_data)
# Convert dates to a common format
correlation_data$date <- as.Date(correlation_data$date)
btc_dates <- as.Date(btc_dates)
# Get common dates for each data set
common_dates_btc <- as.Date(rownames(btc_data_close))
common_dates_gold <- as.Date(rownames(gold_data_close))
common_dates_wti <- as.Date(rownames(wti_data_close))
common_dates_brent <- as.Date(rownames(brent_data_close))
common_dates_nasdaq <- as.Date(rownames(nasdaq_data_close))
common_dates_sp500 <- as.Date(rownames(sp500_data_close))
# Find common dates across all data sets
common_dates <- Reduce(intersect, list(common_dates_btc, common_dates_gold, common_dates_wti, common_dates_brent, common_dates_nasdaq, common_dates_sp500, correlation_matrix$date))
# Filter data for common dates
common_dates <- as.Date(common_dates)
# Filter and add columns for each data set
btc_data_close <-
data.frame(date = common_dates,
BTC = btc_data_close[rownames(btc_data_close) %in%
common_dates, ])
gold_data_close <-
data.frame(date = common_dates,
GOLD = gold_data_close[rownames(gold_data_close) %in%
common_dates, ])
wti_data_close <-
data.frame(date = common_dates,
WTI = wti_data_close[rownames(wti_data_close) %in%
common_dates, ])
brent_data_close <-
data.frame(date = common_dates,
BRENT = brent_data_close[rownames(brent_data_close) %in%
common_dates, ])
nasdaq_data_close <-
data.frame(date = common_dates,
NASDAQ = nasdaq_data_close[rownames(nasdaq_data_close) %in%
common_dates, ])
sp500_data_close <-
data.frame(date = common_dates,
SP500 = sp500_data_close[rownames(sp500_data_close) %in%
common_dates, ])
# Example for BTC
correlation_matrix <- correlation_matrix[correlation_matrix$date %in% common_dates, ]
# Merge with the correlation matrix
correlation_matrix <- merge(correlation_matrix, btc_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, gold_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, wti_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, brent_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, nasdaq_data_close, by = "date", all = TRUE)
correlation_matrix <- merge(correlation_matrix, sp500_data_close, by = "date", all = TRUE)
# Quitar la columna de fecha de correlation_matrix
correlation_matrix <- correlation_matrix[, -1]
# Quitar la columna de fecha de correlation_matrix
correlation_matrix <- correlation_matrix[, -1]
# Calcular la nueva matriz de correlación
correlation_m <- cor(correlation_matrix)
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(correlation_m)
# Specialized the insignificant value according to the significant level
corrplot(correlation_m,
type="upper",
order="hclust",
# pvalues
p.mat = p.mat,
# coeficients
addCoef.col = "white", number.digits = 2, number.cex = 0.75,
sig.level = 0.01,
# hide correlation coefficient on the principal diagonal
diag=FALSE )
# Load required libraries
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
library(quantmod)
# Read cleaned stock prices data
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Read market capitalization data
market_cap_df <- readRDS(here::here("data", "market_cap_df.RDS"))
source("~/projects/rchallange/core/temporary_db.R")
volatility_res
volatility_res
# Save market_cap_df as an RDS file
saveRDS(market_cap_df, here::here("data", "market_cap_df.RDS"))
source("~/projects/rchallange/core/processing_data.R")
volatility_result <- DBI::dbGetQuery(con, query_volatility)
library(DBI)
#library(RPostgreSQL)
library(RSQLite)
# Source cleaning_data.R
source(file.path("core", "cleaning_data.R"))
volatility_result <- DBI::dbGetQuery(con, query_volatility)
source("~/projects/rchallange/core/temporary_db.R")
source("~/projects/rchallange/core/temporary_db.R")
source("~/projects/rchallange/core/temporary_db.R")
volatility_result <- DBI::dbGetQuery(con, query_volatility)
source("~/projects/rchallange/core/temporary_db.R")
source("~/projects/rchallange/core/temporary_db.R")
source("~/projects/rchallange/core/temporary_db.R")
source("~/projects/rchallange/core/temporary_db.R")
file.exists(here::here("data", "volatility_result.RDS"))
file.exists(here::here("data", "price_changes_result.RDS"))
file.exists(here::here("data", "volume_result.RDS"))
file.exists(here::here("data", "market_cap_df.RDS"))
volatility_result <- readRDS(here::here("data", "volatility_result.RDS"))
price_changes_result <- readRDS(here::here("data", "price_changes_result.RDS"))
volume_result <- readRDS(here::here("data", "volume_result.RDS"))
market_cap_df <- readRDS(here::here("data", "market_cap_df.RDS"))
