group_by(date, stock_symbol) %>%
ungroup()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol, values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
print(correlation_m)
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE)
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
source(here::here("core", "temporary_db.R"))
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Seleccionar las columnas relevantes y eliminar filas con NA
correlation_data <- big_tech_stock_prices %>%
select(stock_symbol, date, close) %>%
drop_na()
# Agrupar por fecha y calcular estadísticas resumen para manejar duplicados
correlation_data <- correlation_data %>%
group_by(date, stock_symbol) %>%
ungroup()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
dev.off()
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
# Calcular la matriz de correlación
cor(correlation_matrix)
# Calcular la matriz de correlación
corrplot(correlation_matrix)
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Seleccionar las columnas relevantes y eliminar filas con NA
correlation_data <- big_tech_stock_prices %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
dev.off()
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
market_cap$stock_symbol[1:5]
drawdown_df$Simbolo[1:5]
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000) %>%
order(market_cap, deacreasing = TRUE)
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000) %>%
order_by(market_cap)
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000) %>%
arrange(market_cap)
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (mill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
market_cap <- market_cap[order(market_cap$market_cap), ]
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (mill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000000) %>%
arrange(market_cap)
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (mill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Seleccionar las columnas relevantes y eliminar filas con NA
correlation_data <- big_tech_stock_prices %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
dev.off()
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
drawdown_df
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Seleccionar las columnas relevantes y eliminar filas con NA
correlation_data <- big_tech_stock_prices %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
market_cap_df
market_cap_df
market_cap_df
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap_df <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000000) %>%
arrange(market_cap)
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap_df, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (bill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Seleccionar las 5 compañías con mayor capitalización bursátil
top_5_market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol) %>%
summarise(market_cap = mean(close) * sum(volume)) %>%
arrange(desc(market_cap)) %>%
slice_head(n = 5)
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- top_5_market_cap$stock_symbol
selected_data <- big_tech_stock_prices_cleaned %>%
filter(stock_symbol %in% selected_tickers)
# Crear un gráfico de tendencias de precios
ggplot(selected_data,
aes(x = date,
y = close,
color = stock_symbol)) +
geom_point(size = 1.2) +
labs(title = "Figura 2. PLas 5 Big Tech de mayor capitalización",
x = "Fecha (años)",
y = "Precio de Cierre (u$s)",
color = "Compañías") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
# Seleccionar las columnias relevantes
for_drawdown <- select(selected_data, stock_symbol, date, close)
# Convertir a xts por símbolo
for_drawdown_xts_list <- for_drawdown %>%
group_by(stock_symbol) %>%
arrange(stock_symbol, date) %>%
group_map(~ xts(.x$close, order.by = .x$date), .keep = TRUE)
# Asignar nombres de símbolos a la lista de xts
names(for_drawdown_xts_list) <- unique(for_drawdown$stock_symbol)
# Función para calcular drawdown
calculate_drawdown <- function(xts_data) {
max_val <- cummax(xts_data)
drawdown <- (xts_data - max_val) / max_val * 100
return(drawdown)
}
# Aplicar la función a cada elemento de la lista
drawdowns_list <- map(for_drawdown_xts_list, calculate_drawdown)
# Función para graficar drawdown
plot_drawdown <- function(drawdown_data, symbol) {
ggplot(data = drawdown_data, aes(x = index(drawdown_data), y = drawdown_data[, 1])) +
geom_line() +
labs(title = paste("Drawdown de", symbol),
x = "Fecha",
y = "% caída") +
theme_minimal()
}
# Crear una lista de gráficos
drawdown_plots <- lapply(seq_along(drawdowns_list), function(i) {
plot_drawdown(drawdowns_list[[i]], names(drawdowns_list)[i])
})
# Graficar los drawdowns en una cuadrícula
grid.arrange(grobs = drawdown_plots, ncol = 2)
# Crear una tabla con los porcentajes de drawdown
drawdown_table <- lapply(seq_along(drawdowns_list), function(i) {
data.frame(Simbolo = names(drawdowns_list)[i],
MaxCaida = min(drawdowns_list[[i]]))
})
# Combinar la lista en un solo data frame
drawdown_df <- do.call(rbind, drawdown_table)
# Ordenar la tabla por MaxCaida en orden descendente
drawdown_df <- drawdown_df[order(drawdown_df$MaxCaida), ]
# Imprimir la tabla
kable(drawdown_df, caption = "Tabla 1. Porcentajes de caída máxima")
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Seleccionar las columnas relevantes y eliminar filas con NA
correlation_data <- big_tech_stock_prices %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
market_cap_df
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
library(tidyr)
library(dplyr)
library(corrplot)
library(kableExtra)
library(ggplot2)
library(areaplot)
# Leer los datos de los precios de los tickers
big_tech_stock_prices_cleaned <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Capitalizacion de mercado
market_cap_df <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol, date) %>%
summarise(market_cap = mean(close) * sum(volume) / 1000000000) %>%
arrange(market_cap)
# Crear un gráfico de áreas apiladas para mostrar la capitalización bursátil de todas las compañías
ggplot(market_cap_df, aes(x = reorder(stock_symbol, -market_cap), y = market_cap, fill = stock_symbol)) +
geom_bar(stat = "identity") +
labs(title = "Figura 2. Capitalización Bursátil de compañías Big Tech",
x = "Fecha (años)",
y = "Cap. Bursátil (bill. U$s)") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
# Seleccionar las 5 compañías con mayor capitalización bursátil
top_5_market_cap <- big_tech_stock_prices_cleaned %>%
group_by(stock_symbol) %>%
summarise(market_cap = mean(close) * sum(volume)) %>%
arrange(desc(market_cap)) %>%
slice_head(n = 5)
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- top_5_market_cap$stock_symbol
selected_data <- big_tech_stock_prices_cleaned %>%
filter(stock_symbol %in% selected_tickers)
# Crear un gráfico de tendencias de precios
ggplot(selected_data,
aes(x = date,
y = close,
color = stock_symbol)) +
geom_point(size = 1.2) +
labs(title = "Figura 2. PLas 5 Big Tech de mayor capitalización",
x = "Fecha (años)",
y = "Precio de Cierre (u$s)",
color = "Compañías") +
theme_minimal() +
theme(legend.text = element_text(size = 10),
legend.position = "bottom",
plot.title = element_text(size = 16, hjust = 0.5))
library(PerformanceAnalytics)
library(xts)
library(purrr)
library(gridExtra)
# Seleccionar las columnias relevantes
for_drawdown <- select(selected_data, stock_symbol, date, close)
# Convertir a xts por símbolo
for_drawdown_xts_list <- for_drawdown %>%
group_by(stock_symbol) %>%
arrange(stock_symbol, date) %>%
group_map(~ xts(.x$close, order.by = .x$date), .keep = TRUE)
# Asignar nombres de símbolos a la lista de xts
names(for_drawdown_xts_list) <- unique(for_drawdown$stock_symbol)
# Función para calcular drawdown
calculate_drawdown <- function(xts_data) {
max_val <- cummax(xts_data)
drawdown <- (xts_data - max_val) / max_val * 100
return(drawdown)
}
# Aplicar la función a cada elemento de la lista
drawdowns_list <- map(for_drawdown_xts_list, calculate_drawdown)
# Función para graficar drawdown
plot_drawdown <- function(drawdown_data, symbol) {
ggplot(data = drawdown_data, aes(x = index(drawdown_data), y = drawdown_data[, 1])) +
geom_line() +
labs(title = paste("Drawdown de", symbol),
x = "Fecha",
y = "% caída") +
theme_minimal()
}
# Crear una lista de gráficos
drawdown_plots <- lapply(seq_along(drawdowns_list), function(i) {
plot_drawdown(drawdowns_list[[i]], names(drawdowns_list)[i])
})
# Graficar los drawdowns en una cuadrícula
grid.arrange(grobs = drawdown_plots, ncol = 2)
# Crear una tabla con los porcentajes de drawdown
drawdown_table <- lapply(seq_along(drawdowns_list), function(i) {
data.frame(Simbolo = names(drawdowns_list)[i],
MaxCaida = min(drawdowns_list[[i]]))
})
# Combinar la lista en un solo data frame
drawdown_df <- do.call(rbind, drawdown_table)
# Ordenar la tabla por MaxCaida en orden descendente
drawdown_df <- drawdown_df[order(drawdown_df$MaxCaida), ]
# Imprimir la tabla
kable(drawdown_df, caption = "Tabla 1. Porcentajes de caída máxima")
# Leer los datos de los precios de los tickers
big_tech_stock_prices <- readRDS(here::here("data", "big_tech_stock_prices_cleaned.RDS"))
# Filtrar datos solo para las 5 compañías seleccionadas
selected_tickers <- c("AAPL", "AMZN", "META", "MSFT", "TSLA")
correlation_data <- big_tech_stock_prices %>%
filter(stock_symbol %in% selected_tickers) %>%
select(stock_symbol, date, close) %>%
group_by(date, stock_symbol) %>%
drop_na()
# Crear un marco de datos amplio (wide)
correlation_matrix <- correlation_data %>%
pivot_wider(names_from = stock_symbol,
values_from = close) %>%
drop_na()
correlation_matrix <- correlation_matrix[, -1]
# Calcular la matriz de correlación
correlation_m <- cor(correlation_matrix)
# Crear un gráfico de correlación
correlation_plot <- corrplot(correlation_m,
method = "circle",
type = "upper",
tl.col = "black",
tl.srt = 45)
# Crear un objeto de tabla con las estadísticas de correlación
correlation_stats <- data.frame(
Mean = apply(correlation_matrix, 2, mean, na.rm = TRUE),
SD = apply(correlation_matrix, 2, sd, na.rm = TRUE),
Min = apply(correlation_matrix, 2, min, na.rm = TRUE),
Max = apply(correlation_matrix, 2, max, na.rm = TRUE)
)
# Mostrar la tabla en el documento
kable(correlation_stats, "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = "striped", font_size = 10)
reticulate::repl_python()
reticulate::repl_python()
